syntax = "proto3";

package taskPackage;

// Task
message Task {
  string id = 1;
  string division = 2;
  string employeeId = 3;
  string shiftId = 4;
  string managerId = 5;
  int32 allocatedTimeMin = 6;
  string specialRequests = 7;
  string completed = 8;
  string rejectionReason = 9;
  }

message TaskRequest {
  string id = 1;
}

message AllTaskRequest {}

message TaskResponsePayload {
  int32 status = 1;
  Task data = 2;
}

message AllTaskResponsePayload {
  int32 status = 1;
  repeated Task data = 2;
}
// Employee
message Employee {
  string id = 1;
  string division = 2;
  int32 numberTasks = 3;
  string email = 4;
  string branchName = 5;
  string country = 6;
  string position = 7;
  string firstName = 8;
  string lastName = 9;
  string shiftPreference = 10;
  int32 version = 11;
}

message EmployeeResponsePayload {
  int32 status = 1;
  Employee data = 2;
}

message EmployeeRequest {
  string id = 1;
}
message AllEmployeeResponsePayload {
  int32 status = 1;
  repeated Employee data = 2;
}
message AllEmployeeRequest {}

// Shift
message Shift {
  string id = 1;
  string division = 2;
  string type = 3;
  string start = 4;
  string end = 5;
  int32 version = 6;
}

message ShiftResponsePayload {
  int32 status = 1;
  Shift data = 2;
}

message ShiftRequest {
  string id = 1;
}
message AllShiftResponsePayload {
  int32 status = 1;
  repeated Shift data = 2;
}

message AllShiftRequest {}

// Services
service TaskService {
  rpc GetTask(TaskRequest) returns (TaskResponsePayload){};
  rpc GetAllTasks(AllTaskRequest) returns (AllTaskResponsePayload){}
  rpc CreateTask (Task) returns (TaskResponsePayload){}
  rpc UpdateTask (Task) returns (TaskResponsePayload){}
  rpc DeleteTask (TaskRequest) returns (TaskResponsePayload){}

  rpc GetEmployee (EmployeeRequest) returns (EmployeeResponsePayload){}
  rpc GetAllEmployees(AllEmployeeRequest) returns (AllEmployeeResponsePayload){}

  rpc GetShift(ShiftRequest) returns (ShiftResponsePayload){};
  rpc GetAllShifts(AllShiftRequest) returns (AllShiftResponsePayload){}
  rpc CreateShift (Shift) returns (ShiftResponsePayload){}
  rpc UpdateShift (Shift) returns (ShiftResponsePayload){}

}